#!/bin/bash
# generate is a small bash script to automate project management
# This is free and unencumbered software released into the public domain.

# Set script options
NAME="TexKit"
FORMAT=false
DOCUMENT=false
BUILD=false
RUN=false
INSTALL=false
ALLBUTINSTALL=false
ALL=false
CLEAN=false

# Set build options
RELEASE=false
DEBUG=false
UNITTEST=false
EXAMPLES=false
RENEW=false

# Check parameters and set build options
checkparams()
{
	while [[ $# > 0 ]]
	do
		key="$1"

		case $key in
			format)
			FORMAT=true
			;;

			document)
			DOCUMENT=true
			;;

			build)
			BUILD=true
			;;

			run)
			RUN=true
			;;
			
			install)
			INSTALL=true
			;;

			allbutinstall)
			ALLBUTINSTALL=true
			;;

			all)
			ALL=true
			;;
			
			clean)
			CLEAN=true
			;;

			-h | --help)
			echo -e "Usage: generate [OPTIONS]\nOption\tLong option\tMeaning\nformat\t\t\tFormat the source files\ndocument\t\tDocument the project\nbuild\t\t\tBuild the project\nrun\t\t\tRun the generated project executable(s)\ninstall\t\t\tInstall the project\nallbutinstall\t\tFormat, document, build, and run the project\nall\t\t\tFormat, document, build, run, and install the project\nclean\t\t\tClean the project directory\n-h\t--help\t\tShow this message and exit\n-r\t--release\tRelease build mode\n-d\t--debug\t\tDebug build mode\n-u\t--unittest\tUnittest build mode\n-e\t--examples\tBuild examples\n-rn\t--renew\t\tMake new build\n"
			;;

			-r | --release)
			RELEASE=true
			;;
	
			-d | --debug)
			DEBUG=true
			;;

			-u | --unittest)
			UNITTEST=true
			;;
			
			-e | --examples)
			EXAMPLES=true
			;;

			-rn | --renew)
			RENEW=true
			;;
	
			*)
				# Undefined option
			;;
		esac

		shift
	done

	if [ $DEBUG = false ] && [ $UNITTEST = false ] && [ $RELEASE = false ]; then
		RELEASE=true
	fi
	
	if [ $ALLBUTINSTALL = true ]; then
		ALL=false
	elif [ $ALL = true ]; then
		ALLBUTINSTALL=false
	fi
}

# Format the source files
format()
{
	astyle -T4 -N -O -xC80 -r "src/*.cpp" "src/*.hpp" "tests/*.cpp" "tests/*.hpp" "include/TexKit/*.cpp" "include/TexKit/*.hpp"

	# copy or move Artistic Style backup files to a backup directory

	# CHANGE THE FOLLOWING 4 VARIABLES
	# $indir is the input top level directory containing the .orig files
	# $outdir is the output top level directory containing the moved files
	# $fileext is the backup file extension
	# $copyfiles is COPY (cp) or MOVE (mv) the files
	# spaces ARE allowed in directory and file name (for Cygwin on Windows)

	indir="src"
	outdir="backup"
	fileext="orig"
	# USE ONE OF THE FOLLOWING TO COPY OR MOVE THE FILES
	#copyfiles=cp
	copyfiles=mv

	# display the variables
	echo
	echo "\"$copyfiles\" Artistic Style backup files"
	echo "FROM $indir"
	echo "TO   $outdir"
	echo

	# validate input directory
	if [ ! -d "$indir" ] ; then
		echo "Input directory does not exist!"
		echo
		exit
	fi
	if [ "$indir" == "$outdir" ]; then
		echo "Input and output directories are the same!"
		echo
		exit
	fi

	# optional statement to run Artistic Style
	# astyle  -R  "%indir%\*.cpp"  "%indir%\*.h"
	# if [ $? -ne 0 ] ; then  read -sn1 -p "Error executing astyle!"; fi

	# variables for fle processing
	#echo "processing files..."
	fileHasSpaces=false         # a file or directory name has spaces
	extLength=${#fileext}       # length of the file extension

	# loop thru the input directory to find the .orig files
	# then move the .orig file to the new directory
	for file in `find  "$indir"  -type f  -name "*$fileext" ` ; do

		# allow spaces in file names for Cygwiin on Windows
		# test if this is a continuation line and build $infile
		if [ $fileHasSpaces = true ] ; then
			infile+=' '$file
		else
			infile=$file
		fi
	 
		# test end of string for no file extension
		if [ ! "${infile:(-$extLength)}" = $fileext ] ; then	
			fileHasSpaces=true
			continue
		fi

		fileHasSpaces=false
	#	echo $infile

		# replace input file directory with output directory
		# ${string/substring/replacement}
		outfile=${infile/$indir/$outdir}
	#	echo $outfile

		# strip filename from back of the output file
		# ${string%substring} - /* strips from last '/' to end
		outpath=${outfile%/*}
	#	echo $outpath

		# create output directory
		[ ! -d  "$outpath" ] && mkdir  -p  "$outpath"

		#  copy or move the files
		$copyfiles  -f  "$infile"  "$outpath"
		if [ $? -ne 0 ] ; then  
			read -sn1 -p "press any key to continue!"
			echo
		fi

		# echo for every 100 files processed
		let count++
		let mod=count%100
		[ $mod -eq 0 ] && echo $count files processed
	done

	echo $count files processed
	echo
}

# Document the project
document()
{
	doxygen Doxyfile
}

# Build the project
build()
{
	CMAKEOPT="-DCMAKE_INSTALL_PREFIX:PATH=/usr ../.."
	
	[ ! -d build/release ] || [ ! -d build/debug ] || [ ! -d build/unittest ] && RENEW=true
	
	if [ $RENEW = true ]; then
		[ -d build ] && rm -r build
		mkdir -p build/{release,debug,unittest}
	fi
	
	if [ $EXAMPLES = true ]; then
		CMAKEOPT="-DBUILD_EXAMPLES=true $CMAKEOPT"
	fi

	if [ $RELEASE = true ]; then
		cd build/release
		[ ! -f Makefile ] && cmake -DCMAKE_BUILD_TYPE=Release $CMAKEOPT
		make
		cd ../..
	fi

	if [ $DEBUG = true ]; then
		cd build/debug
		[ ! -f Makefile ] && cmake -DCMAKE_BUILD_TYPE=Debug $CMAKEOPT
		make
		cd ../..
	fi

	if [ $UNITTEST = true ]; then
		cd build/unittest
		[ ! -f Makefile ] && cmake -DCMAKE_BUILD_TYPE=Debug -DBUILD_TESTING=ON $CMAKEOPT
		make
		cd ../..
	fi
}

# Run the generated project executable(s)
run()
{
	if [ $UNITTEST = true ]; then
		cd build/unittest
		make test
		./example_*
		cd ../..
	fi

	if [ $DEBUG = true ]; then
		cd build/debug
		./example_*
		cd ../..
	fi

	if [ $RELEASE = true ]; then
		cd build/release
		./example_*
		cd ../..
	fi
}

install()
{
	if [ $RELEASE = true ]; then
		cd build/release
		sudo make install
		cd ../..
	fi
}

# Format, document, build, and run the project
allbutinstall()
{
	format
	document
	build
	run
}

# Format, document, build, run, and install the project
all()
{
	format
	document
	build
	run
	install
}

# Clean the project directory
clean()
{
	rm -r build doc backup
}

checkparams "$@"

if [ $ALLBUTINSTALL = true ]; then
	allbutinstall
elif [ $ALL = true ]; then
	all
else
	if [ $FORMAT = true ]; then
		format
	fi

	if [ $DOCUMENT = true ]; then
		document
	fi

	if [ $BUILD = true ]; then
		build
	fi

	if [ $RUN = true ]; then
		run
	fi
	
	if [ $INSTALL = true ]; then
		install
	fi
fi

if [ $CLEAN = true ]; then
	clean
fi
